@page "/gametest"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using PacMan.Shared;
@using PacMan.Shared.Models;
@using PacMan.Shared.Enums;

<PageTitle>Game test</PageTitle>

<style>
    /* Define a CSS class to style the table cells */
    .grid-cell {
        border: 1px solid #000; /* Add border styles as needed */
        width: 20px; /* Adjust cell width as needed */
        height: 20px; /* Adjust cell height as needed */
    }
</style>

@if (gameState == EnumGameState.Initializing)
{
    @hubConnection.State

    <button @onclick="Start" disabled="@(!IsConnected)">Connect?</button>
}

@if (gameState == EnumGameState.Starting)
{
    <p>Game is starting...</p>
}

@if (gameState == EnumGameState.Running)
{
    <p>Game:</p> // gonna make a table once everythings working
    <p>Tick number: @ticknumber</p>

    <table>
        @for (int i = 0; i < 31; i++)
        {
            <tr>
                @for (int j = 0; j < 31; j++)
                {
                    <td class="grid-cell">
                        @foreach (string coordinate in playerCoordinates)
                        {
                            string[] coordinateSplit = coordinate.Split(',');
                            if (int.Parse(coordinateSplit[1]) == j && int.Parse(coordinateSplit[2]) == i)
                            {
                                <p>@coordinateSplit[0]</p>
                            }
                        }
                    </td>
                }
            </tr>
        }

        
    </table>
}
<br />
<button @onclick="async () => await ChangeDirection(EnumDirection.Up)">↑</button><br />
<button @onclick="async () => await ChangeDirection(EnumDirection.Left)">←</button>
<button @onclick="async () => await ChangeDirection(EnumDirection.Right)">→</button>
<br />
<button @onclick="async () => await  ChangeDirection(EnumDirection.Down)">↓</button>
<br />



@code {
    private HubConnection? hubConnection;
    private List<string> connectedIds = new List<string>();
    private int ticknumber = 0;
    EnumDirection playerDirection = EnumDirection.Right;
    private EnumGameState gameState = EnumGameState.Initializing;
    private List<string> playerCoordinates = new List<string>();

    private StateModel stateModel = new (EnumGameState.Initializing, new ());


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<StateModel>("Tick", OnTickAsync);

        hubConnection.On<EnumGameState>("Starting", state =>
        {
            Console.WriteLine(state);
            gameState = state;
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        StateHasChanged();
    }

    private async Task Start()
    {
        if (hubConnection is not null)
        {
            try
            {
                if (hubConnection.State == HubConnectionState.Disconnected)
                {
                    await hubConnection.StartAsync();
                }

                await hubConnection.InvokeAsync("OnStart");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + " (Start())");
            }
        }
        StateHasChanged();
    } 

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ChangeDirection(EnumDirection direction)
    {
        if (hubConnection is not null)
        {
            try
            {
                await hubConnection.InvokeAsync("OnChangeDirection", direction);
                Console.WriteLine(direction);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + " (ChangeDirection())");
            }
        }
    }

    private async Task OnTickAsync(StateModel model)
    {
        stateModel = model;
        gameState = model.GameState;

        playerCoordinates = model.Coordinates;

        Console.WriteLine(model.Coordinates.First());

        ticknumber++;
        StateHasChanged();
    }
}