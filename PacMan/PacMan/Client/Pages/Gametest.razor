@page "/gametest"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using PacMan.Shared.Models;
@using PacMan.Shared.Enums;
@using System.Drawing;

<PageTitle>Game test</PageTitle>

<style>
    .grid-cell {
        border: 1px solid #000;
        /* Add border styles as needed */
        width: 20px;
        /* Adjust cell width as needed */
        height: 20px;
        /* Adjust cell height as needed */
    }
</style>

@if (gameState == EnumGameState.Initializing)
{
    @hubConnection.State

    <button @onclick="Start" disabled="@(!IsConnected)">Start</button>
}

@if (gameState == EnumGameState.Starting)
{
    <p>Game is starting...</p>
}

@if (gameState == EnumGameState.Running)
{
    <p>Game:</p>
    <p>Tick number: @ticknumber</p>
    <p>Points @points</p>
    <table>
        @for (var i = 0; i < 31; i++)
        {
            <tr>
                @for (var j = 0; j < 31; j++)
                {
                    <td class="grid-cell">
                        @if (GetTile(j, i).Type == EnumTileType.Wall)
                        {
                            <p style="margin: 0; padding: 0;">█</p>
                        }
                        @if (GetTile(j, i).Type == EnumTileType.Pellet)
                        {
                            <p style="margin: 0; padding: 0;">●</p>
                        }
                        
                        @foreach (var coordinate in playerCoordinates)
                        {
                            var coordinateSplit = coordinate.Split(',');
                            if (int.Parse(coordinateSplit[1]) == j && int.Parse(coordinateSplit[2]) == i)
                            {
                                <p style="margin: 0; padding: 0;">@coordinateSplit[0]</p>
                            }
                        }
                    </td>
                }
            </tr>
        }


    </table>
}
<br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Up)">↑</button><br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Left)">←</button>
<button @onclick="async () => await ChangeDirection(EnumDirection.Right)">→</button><br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Down)">↓</button>
<br/>

@code {
    private List<Tile> tiles = new();
    private Dictionary<string, Tile> tileDictionary = new Dictionary<string, Tile>();
    private HubConnection? hubConnection;
    private int ticknumber = 0;
    private int points = 0;
    EnumDirection playerDirection = EnumDirection.Right;
    private EnumGameState gameState = EnumGameState.Initializing;
    private List<string> playerCoordinates = new();

    private StateModel stateModel = new(EnumGameState.Initializing, new(), new());

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();
        hubConnection.On<Dictionary<string, Tile>>("ReceiveTiles", OnReceiveTiles);
        hubConnection.On<StateModel>("Tick", OnTickAsync);

        hubConnection.On<EnumGameState>("Starting", state =>
        {
            Console.WriteLine(state);
            gameState = state;
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        StateHasChanged();
    }

    private async Task Start()
    {
        if (hubConnection is not null)
        {
            try
            {
                if (hubConnection.State == HubConnectionState.Disconnected)
                {
                    await hubConnection.StartAsync();
                }

                await hubConnection.InvokeAsync("OnStart");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        StateHasChanged();
    }

    private async Task OnReceiveTiles(Dictionary<string, Tile> receivedTiles)
    {
        tileDictionary = receivedTiles;
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ChangeDirection(EnumDirection direction)
    {
        if (hubConnection is not null)
        {
            try
            {
                await hubConnection.InvokeAsync("OnChangeDirection", direction);
                Console.WriteLine(direction);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private async Task OnTickAsync(StateModel model)
    {
        stateModel = model;
        gameState = model.GameState;

        playerCoordinates = model.Coordinates;
        points = model.Points.First();

        Console.WriteLine(model.Coordinates.First());

        ticknumber++;
        StateHasChanged();
    }    

    private Tile GetTile(int x, int y)
    {
        if (tileDictionary.TryGetValue($"{x}_{y}", out Tile tile))
        {
            return tile;
        }
        return new Tile();
    }
}