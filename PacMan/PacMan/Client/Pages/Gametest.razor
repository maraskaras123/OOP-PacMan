@page "/gametest"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject StartCommand StartCommand
@implements IAsyncDisposable
@using PacMan.Client.Classes;
@using PacMan.Shared.Models;
@using PacMan.Shared.Enums;
@using System.Drawing;

<PageTitle>Game test</PageTitle>

<style>
    /* Define a CSS class to style the table cells */
    .grid-cell {
        border: 1px solid #000;
        /* Add border styles as needed */
        width: 20px;
        /* Adjust cell width as needed */
        height: 20px;
        /* Adjust cell height as needed */
    }
</style>

@if (_gameState == EnumGameState.Initializing)
{
    <label>width</label>
    <input @bind="_gridOptions.Width"/>
    <label>height</label>
    <input @bind="_gridOptions.Height"/>
    <label>random tiles</label>
    <input @bind="_gridOptions.RandomTileCount"/>
    <button @onclick="Start" disabled="@(!IsConnected)">Start</button>
}

@if (_gameState == EnumGameState.Starting)
{
    <p>Game is starting...</p>
}

@if (_gameState == EnumGameState.Running)
{
    <p>Game:</p>
    <p>Tick number: @_tickNumber</p>

    @for (var i = 0; i < _points.Count; i++)
    {
        <p>Player @(i + 1): @_points[i] points</p>
    }

    <table>
        @for (var i = 0; i < _grid.Height; i++)
        {
            <tr>
                @for (var j = 0; j < _grid.Width; j++)
                {
                    var enemyAtPosition = _enemies.FirstOrDefault(e => e.Position == new Point(j, i));

                    <td class="grid-cell">
                        @if (_grid.GetTile(j, i).Type == EnumTileType.Wall)
                        {
                            <p style="margin: 0; padding: 0;">█</p>
                        }
                        @if (_grid.GetTile(j, i).Type == EnumTileType.Pellet && enemyAtPosition == null)
                        {
                            <p style="margin: 0; padding: 0;">●</p>
                        }

                        @if (enemyAtPosition != null)
                        {
                            @if (enemyAtPosition.Character == 'B')
                            {
                                <p style="color: dodgerblue">@enemyAtPosition.Character</p>
                            }
                            @if (enemyAtPosition.Character == 'R')
                            {
                                <p style="color: indianred">@enemyAtPosition.Character</p>
                            }
                        }

                        @foreach (var coordinate in _playerCoordinates)
                        {
                            var coordinateSplit = coordinate.Split(',');
                            if (int.Parse(coordinateSplit[1]) == j && int.Parse(coordinateSplit[2]) == i)
                            {
                                <p style="margin: 0">@(int.Parse(coordinateSplit[0]) + 1)</p>
                            }
                        }
                    </td>
                }
            </tr>
        }
    </table>
}
<br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Up)">↑</button><br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Left)">←</button>
<button @onclick="async () => await ChangeDirection(EnumDirection.Right)">→</button><br/>
<button @onclick="async () => await ChangeDirection(EnumDirection.Down)">↓</button>
<br/>

@code {
    private TileGrid _grid = new();
    private readonly TileGridBuilderOptions _gridOptions = new();
    private List<EnemyModel> _enemies = new();
    private HubConnection? _hubConnection;
    private List<string> _connectedIds = new();
    private int _tickNumber = 0;
    private List<int> _points = new();
    EnumDirection _playerDirection = EnumDirection.Right;
    private EnumGameState _gameState = EnumGameState.Initializing;
    private List<string> _playerCoordinates = new();
    private StateModel _stateModel = new(EnumGameState.Initializing, new(), new());

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();
        _hubConnection.On<TileGrid>("ReceiveGrid", OnReceiveGrid);
        _hubConnection.On<List<EnemyModel>>("ReceiveEnemies", OnReceiveEnemies);
        _hubConnection.On<StateModel>("Tick", OnTickAsync);

        _hubConnection.On<EnumGameState>("Starting", state =>
        {
            Console.WriteLine(state);
            _gameState = state;
            StateHasChanged();
        });

        try
        {
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        StateHasChanged();
    }

    private async Task Start()
    {
        if (_hubConnection is not null && _gridOptions is not null)
        {
            await StartCommand.Execute(_hubConnection, _gridOptions);
        }
        StateHasChanged();
    }

    private async Task OnReceiveGrid(TileGrid receivedGrid)
    {
        _grid = receivedGrid;
        StateHasChanged();
    }

    private async Task OnReceiveEnemies(List<EnemyModel> receivedEnemies)
    {
        _enemies = receivedEnemies;
        StateHasChanged();
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task ChangeDirection(EnumDirection direction)
    {
        if (_hubConnection is not null)
        {
            try
            {
                await _hubConnection.InvokeAsync("OnChangeDirection", direction);
                Console.WriteLine(direction);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + " (ChangeDirection())");
            }
        }
    }

    private async Task OnTickAsync(StateModel model)
    {
        _stateModel = model;
        _gameState = model.GameState;

        _playerCoordinates = model.Coordinates;
        _points = model.Points;
        Console.WriteLine(model.Coordinates.First());
        _tickNumber++;
        StateHasChanged();
    }

}