@page "/session/{SessionId}"

<PageTitle>Session</PageTitle>

<div class="session">
    @if (GameState == EnumGameState.Initializing)
    {
        <CascadingValue Value="@(this)">
            <InitializingSession/>
        </CascadingValue>
    }

    @if (GameState == EnumGameState.Starting)
    {
        <p>Game is starting...</p>
        @if (SelectedInputMethod == EnumInputMethod.Keyboard)
        {
            <script>
                document.addEventListener('keydown', event => {
                    DotNet.invokeMethodAsync('PacMan.Client', 'HandleKeyboardInput', event.key);
                });
            </script>
        }
    }

    @if (GameState == EnumGameState.Finished)
    {
        <div class="card">
            <div class="card-header">
                <h3>Finished!</h3>
            </div>
            <div class="card-body">
                <ol class="list-group">
                    @foreach (var playerScore in PlayerInfo.OrderByDescending(x => x.Points))
                    {
                        <li class="@GetPlayerScoreClass(playerScore) list-group-item">
                            @playerScore.PlayerName:
                            @playerScore.Points
                        </li>
                    }
                </ol>
            </div>
            <div class="card-body">
                @if (Players.FirstOrDefault()?.Name == CurrentPlayerName)
                {
                    <button class="btn btn-primary mr-4" @onclick="async () => await OnRestart()">
                        <span class="oi oi-reload" title="reload" aria-hidden="true"></span>
                        Restart
                    </button>
                }
                <button class="btn btn-danger" @onclick="OnLeave">
                    <span class="oi oi-account-logout" title="account-logout" aria-hidden="true"></span>
                    Leave
                </button>
            </div>

        </div>
    }

    @if (GameState == EnumGameState.Running)
    {
        <div class="scorecontainer">
            <div class="scoreboard">
                @foreach (var playerScore in PlayerInfo)
                {
                    <p>
                        @(new MarkupString(GetPacmanColorByPlayer(playerScore.PlayerId))) @(playerScore.PlayerName):
                        @playerScore.Points points
                    </p>
                }
            </div>
        </div>

        <br/>
        <div>
            <center>

            </center>

        </div>

        <div class="container">
            <div class="gridbox">
                <table class="game-grid">
                    @for (var i = 0; i < Grid.Height; i++)
                    {
                        <tr>
                            @for (var j = 0; j < Grid.Width; j++)
                            {
                                if (WebGrid.TryGetValue(j * Grid.Width + i, out var tile))
                                {
                                    @(tile.Renderer.Render(tile.Options))
                                }
                            }
                        </tr>
                    }
                </table>
            </div>
            <div class="poison-legend">
                <div>
                    <div class="ImobilizePoison"></div>
                    <span>Immobile Poison</span>
                </div>
                <div>
                    <div class="SlowPoison"></div>
                    <span>Slow Poison</span>
                </div>
                <div>
                    <div class="FoodPoison"></div>
                    <span>Food Poison</span>
                </div>
                <div>
                    <div class="PointsPoison"></div>
                    <span>Points Poison</span>
                </div>

                @if (SelectedInputMethod == EnumInputMethod.Buttons)
                {
                    <br/>
                    <button @onclick="async () => Input.ChangeDirection(EnumDirection.Up.ToString())">↑</button>

                    <br/>
                    <button @onclick="async () => Input.ChangeDirection(EnumDirection.Left.ToString())">←</button>
                    <button @onclick="async () => Input.ChangeDirection(EnumDirection.Right.ToString())">→</button>

                    <br/>
                    <button @onclick="async () => Input.ChangeDirection(EnumDirection.Down.ToString())">↓</button>
                }
            </div>
        </div>
    }
</div>