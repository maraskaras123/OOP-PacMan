@page "/session/{SessionId}"

<PageTitle>Session</PageTitle>

<div class="session">
    @if (GameState == EnumGameState.Initializing)
    {
        <CascadingValue Value="@(this)">
            <InitializingSession />
        </CascadingValue>
    }

    @if (GameState == EnumGameState.Starting)
    {
        <p>Game is starting...</p>
        @if (SelectedInputMethod == EnumInputMethod.Keyboard)
        {
            <script>
                document.addEventListener('keydown', event => {
                    DotNet.invokeMethodAsync('PacMan.Client', 'HandleKeyboardInput', event.key);
                });
            </script>
        }
    }

    @if (GameState == EnumGameState.Finished)
    {
        <div class="card">
            <div class="card-header">
                <h3>Finished!</h3>
            </div>
            <div class="card-body">
                <ol class="list-group">
                    @foreach (var playerScore in PlayerInfo.OrderByDescending(x => x.Points))
                    {
                        <li class="@GetPlayerScoreClass(playerScore) list-group-item">@playerScore.PlayerName:
                            @playerScore.Points</li>
                    }
                </ol>
            </div>
            <div class="card-body">
                @if (Players.FirstOrDefault()?.Name == CurrentPlayerName)
                {
                    <button class="btn btn-primary mr-4" @onclick="async () => await OnRestart()">
                        <span class="oi oi-reload" title="reload" aria-hidden="true"></span>
                        Restart
                    </button>
                }
                <button class="btn btn-danger" @onclick="OnLeave">
                    <span class="oi oi-account-logout" title="account-logout" aria-hidden="true"></span>
                    Leave
                </button>
            </div>

        </div>
    }

    @if (GameState == EnumGameState.Running)
    {
        <div class="scoreboard">
            @foreach (var playerScore in PlayerInfo)
            {
                <p>@(new MarkupString(GetPacmanColorByPlayer(playerScore.PlayerId))) @(playerScore.PlayerName):
                    @playerScore.Points points</p>
            }
        </div>
        <br />

        <table class="game-grid">
            @for (var i = 0; i < Grid.Height; i++)
            {
                <tr>
                    @for (var j = 0; j < Grid.Width; j++)
                    {
                        // get current positions enemy, player and tile
                        var enemyAtPosition = Enemies.FirstOrDefault(e => e.Position.X == j && e.Position.Y == i);
                        var playerAtPosition = "";
                        var playerDirection = "";
                        foreach (var coordinates in PlayerCoordinates.Select(x => x.Split(',')))
                        {
                            if (int.Parse(coordinates[1]) == j && int.Parse(coordinates[2]) == i)
                            {
                                playerAtPosition = coordinates[0];
                                playerDirection = coordinates[3];
                            }
                        }
                        var tileType = Grid.GetTile(j, i);

                        // if player at current position - render player
                        if (playerAtPosition != "")
                        {
                            <td class="grid-cell">
                                <center>
                                    @(new MarkupString(GetPacmanColorByPlayer(int.Parse(playerAtPosition), int.Parse(playerDirection))))
                                </center>
                            </td>
                        }
                        else
            // no player at current position - render enemy
            if (enemyAtPosition != null)
                        {
                            <td class="grid-cell">
                                <center>
                                    @(new MarkupString(GetGhostColorByChar(enemyAtPosition.Character)))
                                </center>
                            </td>
                        }
                        else
                        // no player or enemy at current position - render tile
                        {
                            switch (tileType)
                            {
                                case EnumTileType.Wall:
                                    @(new MarkupString("<td class='grid-cell wall'></td>"))
                                    break;
                                case EnumTileType.Pellet:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='pellet'></center></div></td>"))
                                    break;
                                case EnumTileType.MegaPellet:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='megapellet'></center></div></td>"))
                                    break;
                                case EnumTileType.ImobilePoison:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='ImobilizePoison'></center></div></td>"))
                                    break;
                                case EnumTileType.SlowPoison:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoison'></center></div></td>"))
                                    break;
                                case EnumTileType.SlowPoisonAntidote:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoisonAntidote'></center></div></td>"))
                                    break;
                                case EnumTileType.FoodPoison:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoison'></center></div></td>"))
                                    break;
                                case EnumTileType.FoodPoisonAntidote:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoisonAntidote'></center></div></td>"))
                                    break;
                                case EnumTileType.PointsPoison:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoison'></center></div></td>"))
                                    break;
                                case EnumTileType.PointsPoisonAntidote:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='SlowPoisonAntidote'></center></div></td>"))
                                    break;
                                case EnumTileType.AllCureTile:
                                    @(new MarkupString("<td class='grid-cell'><center><div class='AllCure'></center></div></td>"))
                                    break;
                                default:
                                    @(new MarkupString("<td class='grid-cell'></td>"))
                                    break;
                            }
                        }
                    }
                </tr>
            }
        </table>

        @if (SelectedInputMethod == EnumInputMethod.Buttons)
        {
            <br />
            <button @onclick="async () => Input.ChangeDirection(EnumDirection.Up.ToString())">↑</button>

            <br />
            <button @onclick="async () => Input.ChangeDirection(EnumDirection.Left.ToString())">←</button>
            <button @onclick="async () => Input.ChangeDirection(EnumDirection.Right.ToString())">→</button>

            <br />
            <button @onclick="async () => Input.ChangeDirection(EnumDirection.Down.ToString())">↓</button>
            <br />
        }
    }
</div>